<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title><![CDATA[Andrew Martin is a Web Developer]]></title>
  <subtitle><![CDATA[web development and ramblings in Los Angeles and beyond]]></subtitle>
  <link href="/atom.xml" rel="self"/>
  <link href="http://blog.andrewmart.in/"/>
  <updated>2014-04-10T21:01:16.055Z</updated>
  <id>http://blog.andrewmart.in/</id>
  
  <author>
    <name><![CDATA[Andrew Martin]]></name>
    <email><![CDATA[hello@andrewmart.in]]></email>
  </author>
  
  <generator uri="http://zespia.tw/hexo/">Hexo</generator>
  
  <entry>
    <title><![CDATA[Synchronous Streams with Gulp]]></title>
    <link href="http://blog.andrewmart.in/2014/04/10/returning-streams-with-gulp/"/>
    <id>http://blog.andrewmart.in/2014/04/10/returning-streams-with-gulp/</id>
    <published>2014-04-10T20:38:36.000Z</published>
    <updated>2014-04-10T21:01:07.000Z</updated>
    <content type="html"><![CDATA[<p>I’ve been a huge <a href="http://www.gruntjs.com" target="_blank">Grunt</a> fan for awhile now, and it wasn’t until recently that I started using an up and coming tool <a href="http://gulpjs.com/" target="_blank">Gulp</a> for my tasks.</p>
<blockquote>
<p>Special thanks to Dan Tello over at Viget for <a href="http://viget.com/extend/gulp-browserify-starter-faq" target="_blank">his post</a> that really inspired me to get into this.</p>
</blockquote>
<p>With Gulp, it’s all about the stream, man. You use asyncronous node <code>pipe</code> methods to chain streams together. It’s really tricky to understand if you’re not familiar with this concept, and it took me awhile (I’m still only now just <em>getting it</em> as I type).</p>
<p>With Grunt, it’s all about configuration; with Gulp, it’s all about building your tasks dynamically. It only took me an hour or two to migrate an existing Gruntfile over to a gulpfile. Including a learning curve with a new framework, this isn’t too bad.</p>
<p>I won’t dive too deep into it today, but one problem I ran into was with actually getting the tasks to finish before I started another one. It seemed like a bug, until I realized what was happening:</p>
<blockquote>
<p>Gulp was working so fast, one stream hadn’t finished in time for the other to occur.</p>
</blockquote>
<h5 id="Example:">Example:</h5>
<p>A common use case for this is compiling CSS, then minifying it. Seems simple, right? With Grunt, you’d just stack the tasks together, and since Grunt runs them one at a time, you have no issues.</p>
<figure class="highlight js"><figcaption><span>Gruntfile.js</span></figcaption><table><tr><td class="gutter"><pre>1
</pre></td><td class="code"><pre>grunt.registerTask(<span class="string">'default'</span>, [<span class="string">"coffee"</span>, <span class="string">"stylus"</span>, <span class="string">"jst"</span>, <span class="string">"concurrent:compress"</span>, <span class="string">"watch"</span>]);
</pre></td></tr></table></figure>

<p>With Gulp, however, it’s not quite as simple.</p>
<p><em>Just an FYI here, I’m following Dan’s model of modularizing my tasks into individual files, hence the alternate filenames in the task definitions below. If you’re going with a basic setup, these can all live in your gulpfile.</em></p>
<figure class="highlight js"><figcaption><span>gulpfile.js</span></figcaption><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
</pre></td><td class="code"><pre><span class="comment">// compile stuff</span>
gulp.task(<span class="string">"compile"</span>, [
  <span class="string">"coffee"</span>,
  <span class="string">"stylus"</span>
]);

<span class="comment">// minify/compress.</span>
gulp.task(<span class="string">"compress"</span>, [
  <span class="string">"concat_app"</span>,
  <span class="string">"concat_vendor"</span>,
  <span class="string">"uglify_vendor"</span>,
  <span class="string">"cssmin"</span>
]);

<span class="comment">// DEVELOP: basic watch task.</span>
gulp.task(<span class="string">"default"</span>, [
  <span class="string">"compile"</span>,
  <span class="string">"compress"</span>,
  <span class="string">"watch"</span>
]);

<span class="comment">// PRODUCTION: basic compilation step.</span>
gulp.task(<span class="string">"build"</span>, [
  <span class="string">"compile"</span>,
  <span class="string">"compress"</span>
]);
</pre></td></tr></table></figure>

<p>This doesn’t work as you expect. If you remove all CSS files from your project and run <code>gulp build</code>, you’ll end up with a compiled CSS file, but no minified version. However, if you run <code>gulp build</code> again, you’ll get your minified version, because the CSS file is already there.</p>
<p>Fortunately, gulp ships with an <code>orchestrator</code> that allows you to essentially specify <em>dependencies</em> that other tasks require. These dependencies are other Gulp tasks.</p>
<p>To specify one, just add an array after you task name, as with my cssmin task below, where I’ve added <code>[&#39;stylus&#39;]</code>.</p>
<h6 id="Cssmin_task:">Cssmin task:</h6>
<figure class="highlight js"><figcaption><span>cssmin.js</span></figcaption><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
</pre></td><td class="code"><pre><span class="keyword">var</span> cssmin = <span class="built_in">require</span>(<span class="string">'gulp-cssmin'</span>),
  rename = <span class="built_in">require</span>(<span class="string">'gulp-rename'</span>);

module.exports = <span class="function"><span class="keyword">function</span><span class="params">()</span> {</span>
  <span class="keyword">return</span> gulp.task(<span class="string">"cssmin"</span>, [<span class="string">'stylus'</span>], <span class="function"><span class="keyword">function</span><span class="params">()</span> {</span>
    gulp.src(<span class="string">"public/stylesheets/vendor.css"</span>)
      .pipe(cssmin())
      .pipe(rename(<span class="string">"vendor.min.css"</span>))
      .pipe(gulp.dest(<span class="string">"public/stylesheets"</span>));

    gulp.src(<span class="string">"public/stylesheets/application.css"</span>)
      .pipe(cssmin())
      .pipe(rename(<span class="string">"application.min.css"</span>))
      .pipe(gulp.dest(<span class="string">"public/stylesheets"</span>));
  });

}
</pre></td></tr></table></figure>

<h6 id="Stylus_task:">Stylus task:</h6>
<figure class="highlight js"><figcaption><span>stylus.js</span></figcaption><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
</pre></td><td class="code"><pre><span class="keyword">var</span> gulp = <span class="built_in">require</span>(<span class="string">"gulp"</span>),
  accord = <span class="built_in">require</span>(<span class="string">"gulp-accord"</span>),
  cssmin = <span class="built_in">require</span>(<span class="string">"gulp-minify-css"</span>),
  rename = <span class="built_in">require</span>(<span class="string">"gulp-rename"</span>),
  notify = <span class="built_in">require</span>(<span class="string">"gulp-notify"</span>),
  livereload = <span class="built_in">require</span>(<span class="string">"gulp-livereload"</span>),
  stylus = <span class="built_in">require</span>(<span class="string">'gulp-stylus'</span>);
<span class="comment">// stylus = function(opts) {</span>
<span class="comment">//   return accord("stylus", opts);</span>
<span class="comment">// };</span>

module.exports = <span class="function"><span class="keyword">function</span><span class="params">()</span> {</span>
  gulp.task(<span class="string">"stylus"</span>, <span class="function"><span class="keyword">function</span><span class="params">()</span> {</span>
    gulp.src(<span class="string">"public/stylesheets/styl/application.styl"</span>)
      .pipe(stylus({
        set: [
          <span class="string">"resolve url"</span>,
          <span class="string">"include-css"</span>,
          <span class="string">"linenos"</span>,
          <span class="string">"compress"</span>
        ]
      })).on(<span class="string">"error"</span>, notify.onError({
        message: <span class="string">"&lt;%= error.message %&gt;"</span>,
        title: <span class="string">"Stylus Error"</span>
      }))
      .pipe(gulp.dest(<span class="string">"public/stylesheets"</span>))
      .pipe(livereload());
    <span class="comment">// .pipe(cssmin())</span>
    <span class="comment">// .pipe(rename("application.min.css"))</span>
    <span class="comment">// .pipe(gulp.dest("public/stylesheets"));</span>

    <span class="comment">// vendor</span>
    <span class="keyword">return</span> gulp.src(<span class="string">"public/stylesheets/styl/vendor.styl"</span>)
      .pipe(stylus({
        set: [
          <span class="string">"include css"</span>,
          <span class="string">"linenos"</span>
        ]
      })).on(<span class="string">"error"</span>, notify.onError({
        message: <span class="string">"&lt;%= error.message %&gt;"</span>,
        title: <span class="string">"Stylus Error"</span>
      }))
      .pipe(gulp.dest(<span class="string">"public/stylesheets"</span>));
  });
};
</pre></td></tr></table></figure>

<p>Now for the tricky part. See on <code>line 33</code> where I’m returning the task itself? If you omit this line, the dependency is considered resolved and will never run. This line is super important and was confusing the hell out of me for quite awhile there, so I thought I’d share in case someone else ends up confused.</p>
<p>Ideally, I could split this task into two separate task definitions, but for this project that was good enough. I always want my vendor to be compiled, and though it rarely changes, with Gulp the compilation was so fast it was not even noticeable without it.</p>
<p>That’s all for today: make sure you return that stream!</p>
]]></content>
    
    
      <category term="gulp" scheme="http://blog.andrewmart.in/tags/gulp/"/>
    
      <category term="build" scheme="http://blog.andrewmart.in/tags/build/"/>
    
      <category term="node" scheme="http://blog.andrewmart.in/tags/node/"/>
    
      <category term="Front End Development" scheme="http://blog.andrewmart.in/categories/Front%20End%20Development/"/>
    
      <category term="Gulp" scheme="http://blog.andrewmart.in/categories/Front%20End%20Development/Gulp/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Soft Injecting CSS]]></title>
    <link href="http://blog.andrewmart.in/2014/04/06/soft-injecting-css/"/>
    <id>http://blog.andrewmart.in/2014/04/06/soft-injecting-css/</id>
    <published>2014-04-07T06:15:31.000Z</published>
    <updated>2014-04-07T18:21:34.000Z</updated>
    <content type="html"><![CDATA[<div class = "is-edited" markdown = "1">This task has been changed. It’s now called <a href="https://www.npmjs.org/package/grunt-browser-sync" target="_blank">grunt-browser-sync</a>.</div>

<p>I am a big fan (if you haven’t noticed in my prior posts) of optimizing my workflow. One thing I’ve never found until recently was a solid way to deal with styles and a live workflow. In comes <a href="https://www.npmjs.org/package/grunt-style-injector" target="_blank">grunt-style-injector</a>.</p>
<p>The task is simple.</p>
<figure class="highlight coffee"><figcaption><span>gruntfile.coffee</span></figcaption><table><tr><td class="gutter"><pre>1
2
3
4
5
6
</pre></td><td class="code"><pre><span class="attribute">styleinjector</span>:
  <span class="attribute">files</span>:
    <span class="attribute">src</span>: <span class="string">'css/application.css'</span>
    <span class="attribute">options</span>:
      <span class="attribute">watchTask</span>: <span class="literal">false</span>
      <span class="attribute">debugInfo</span>: <span class="literal">true</span>
</pre></td></tr></table></figure>

<p>You simply type in:</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
</pre></td><td class="code"><pre>⇒ grunt styleinjector
Running <span class="string">"styleinjector:files"</span> (styleinjector) task
   info  - socket.io started


All Set Up! Now copy & paste this snippet just before the closing &lt;/body&gt; tag <span class="keyword">in</span> your website.

&lt;script src=<span class="string">'http://192.168.1.113:3000/socket.io/socket.io.js'</span>&gt;&lt;/script&gt;
&lt;script src=<span class="string">'http://192.168.1.113:3001/style-injector-client.min.js'</span>&gt;&lt;/script&gt;
</pre></td></tr></table></figure>

<p>Put those snippets in your <code>index.html</code> (or partial of choice) and make sure you don’t commit said file, and you’re good to go. Since it’s framework agnostic, you can use whatever compilation process you want, and it never falsely reloads CSS (something I found) happened <em>all the time</em> with <code>LiveReload</code>.</p>
]]></content>
    
    
      <category term="grunt" scheme="http://blog.andrewmart.in/tags/grunt/"/>
    
      <category term="sass" scheme="http://blog.andrewmart.in/tags/sass/"/>
    
      <category term="workflow" scheme="http://blog.andrewmart.in/tags/workflow/"/>
    
      <category term="Front End Development" scheme="http://blog.andrewmart.in/categories/Front%20End%20Development/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Open files recursively with a Simple Grunt task.]]></title>
    <link href="http://blog.andrewmart.in/2014/04/06/open-files-recursively-with-a-simple-grunt-task/"/>
    <id>http://blog.andrewmart.in/2014/04/06/open-files-recursively-with-a-simple-grunt-task/</id>
    <published>2014-04-07T00:51:01.000Z</published>
    <updated>2014-04-07T20:27:21.000Z</updated>
    <content type="html"><![CDATA[<p>I kicked off a project tonight and had a bunch of HTML files I wanted to open. I thought to myself, this has happened more than once, why not fire off a quick Grunt task?</p>
<p>Let’s get this fired off:</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre>1
2
3
</pre></td><td class="code"><pre>$ npm init
$ (... follow prompts)
$ npm install -g grunt-cli grunt
</pre></td></tr></table></figure>

<p>We’ll need a the <code>open</code> npm module. The other dependencies are baked into node.</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre>1
</pre></td><td class="code"><pre>$ npm install open --save
</pre></td></tr></table></figure>

<p>I decided to set up a couple basic options, to at least make it feel like a more modular task I could use elsewhere:</p>
<ul>
<li>A base filename to open (in this case, <code>index.html</code>)</li>
<li>Firefox as the <code>appName</code> for the <code>open</code> task, so as to not bog down my Chrome windows</li>
<li>A base path to start from (in this case, just using the current path)</li>
</ul>
<p>Here’s the finalized <code>Gruntfile.coffee</code>:</p>
<figure class="highlight coffee"><figcaption><span>Gruntfile.coffee</span></figcaption><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
</pre></td><td class="code"><pre>open = <span class="built_in">require</span>(<span class="string">'open'</span>)
fs = <span class="built_in">require</span>(<span class="string">'fs'</span>)

<span class="built_in">module</span>.<span class="function"><span class="title">exports</span> = <span class="params">(grunt)</span> -&gt;</span>
  grunt.initConfig
    <span class="attribute">openFiles</span>:
      <span class="attribute">options</span>:
        <span class="attribute">filename</span>: <span class="string">"index.html"</span>
        <span class="attribute">appName</span>: <span class="string">"Firefox"</span>
      <span class="attribute">path</span>: <span class="string">"./"</span>

  grunt.registerMultiTask <span class="string">'openFiles'</span>, <span class="string">'open'</span>,<span class="function"> -&gt;</span>
    options = <span class="property">@options</span>()
    basePath = <span class="property">@data</span>.toString()
    files = fs.readdirSync(basePath)
    <span class="keyword">for</span> i <span class="keyword">of</span> files
      <span class="keyword">continue</span> <span class="keyword">unless</span> files.hasOwnProperty(i)
      name = basePath + files[i]
      <span class="keyword">if</span> fs.statSync(name).isDirectory()
        open(name + <span class="string">"/"</span> + options.filename, options.appName)

  grunt.registerTask(<span class="string">"default"</span>, <span class="string">"openFiles"</span>)
</pre></td></tr></table></figure>

<p>Pretty slick. All I need to do is type <code>grunt</code> in the terminal, it checks to ensure what it’s trying to open is a directory, and then fires it up.</p>
<h4 id="Note:">Note:</h4>
<p>Since all of the directories were named similarly, I was able to follow a pretty standard pattern. Of course, we could set this up a little more elegantly, say, by using a conditional to make sure the files exist, a limit to how many files we want to open, etc.</p>
<p>This might be a one off use case, but just shows you how powerful (and easy) it can be to use Grunt to automate even more simple tasks.</p>
]]></content>
    
    
      <category term="grunt" scheme="http://blog.andrewmart.in/tags/grunt/"/>
    
      <category term="Front End Development" scheme="http://blog.andrewmart.in/categories/Front%20End%20Development/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Loops and Mixins in SASS]]></title>
    <link href="http://blog.andrewmart.in/2014/04/05/loops-and-mixins-in-sass/"/>
    <id>http://blog.andrewmart.in/2014/04/05/loops-and-mixins-in-sass/</id>
    <published>2014-04-05T23:29:18.000Z</published>
    <updated>2014-04-07T19:13:59.000Z</updated>
    <content type="html"><![CDATA[<p>The beauty of freelancing is twofold: you work on a lot of different projects simultaneously, and have to learn to quickly dive into a various set of systems at any given moment.</p>
<p>One challenge I run into in my work is building scalable, modular CSS, and lately I’ve been making a strong effort to write more modular code.</p>
<p>Here’s a pattern I ran into today. Say I want to add a simple spacer class that adds a little padding or margin on an element. I’d rather not have to do anything beyond editing the HTML markup, so let’s generate some CSS classes using a SASS <code>@each</code> loop.</p>
<p>My first take was to set up some <code>$spaceamounts</code>, then generate a few mixins:</p>
<figure class="highlight sass"><figcaption><span>helpers.scss</span></figcaption><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
</pre></td><td class="code"><pre>
<span class="variable">$spaceamounts</span><span class="symbol">:</span> (<span class="number">5</span>, <span class="number">10</span>, <span class="number">15</span>, <span class="number">20</span>, <span class="number">25</span>, <span class="number">30</span>);

<span class="variable">@mixin</span> generate-margin-bottom() {
  <span class="variable">@each</span> <span class="variable">$space</span> <span class="keyword">in</span> <span class="variable">$spaceamounts</span> {
    .mb-<span class="comment">#{$space} {</span>
      margin-<span class="symbol">bottom:</span> <span class="comment">#{$space}px;</span>
    }
  }
}
<span class="variable">@mixin</span> generate-margin-right() {
  <span class="variable">@each</span> <span class="variable">$space</span> <span class="keyword">in</span> <span class="variable">$spaceamounts</span> {
    .mr-<span class="comment">#{$space} {</span>
      margin-<span class="symbol">right:</span> <span class="comment">#{$space}px;</span>
    }
  }
}
<span class="variable">@mixin</span> generate-margin-top() {
  <span class="variable">@each</span> <span class="variable">$space</span> <span class="keyword">in</span> <span class="variable">$spaceamounts</span> {
    .mt-<span class="comment">#{$space} {</span>
      margin-<span class="symbol">top:</span> <span class="comment">#{$space}px;</span>
    }
  }
}
<span class="variable">@mixin</span> generate-padding-top() {
  <span class="variable">@each</span> <span class="variable">$space</span> <span class="keyword">in</span> <span class="variable">$spaceamounts</span> {
    .pt-<span class="comment">#{$space} {</span>
      padding-<span class="symbol">top:</span> <span class="comment">#{$space}px;</span>
    }
  }
}
<span class="variable">@mixin</span> generate-padding-bottom() {
  <span class="variable">@each</span> <span class="variable">$space</span> <span class="keyword">in</span> <span class="variable">$spaceamounts</span> {
    .pb-<span class="comment">#{$space} {</span>
      padding-<span class="symbol">bottom:</span> <span class="comment">#{$space}px;</span>
    }
  }
}

<span class="variable">@include</span> generate-margin-bottom();
<span class="variable">@include</span> generate-margin-right();
<span class="variable">@include</span> generate-margin-top();
<span class="variable">@include</span> generate-padding-bottom();
<span class="variable">@include</span> generate-padding-top();
</pre></td></tr></table></figure>

<p>This approach definitely works. I get some sensibly generated CSS:</p>
<figure class="highlight css"><figcaption><span>application.css</span></figcaption><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
</pre></td><td class="code"><pre>
<span class="class">.ml-5</span> <span class="rules">{
  <span class="rule"><span class="attribute">margin-left</span>:<span class="value"> <span class="number">5</span>px</span></span>; <span class="rule">}</span></span>

<span class="class">.ml-10</span> <span class="rules">{
  <span class="rule"><span class="attribute">margin-left</span>:<span class="value"> <span class="number">10</span>px</span></span>; <span class="rule">}</span></span>

<span class="class">.ml-15</span> <span class="rules">{
  <span class="rule"><span class="attribute">margin-left</span>:<span class="value"> <span class="number">15</span>px</span></span>; <span class="rule">}</span></span>

...
</pre></td></tr></table></figure>

<p>But, that’s a lot of copying and pasting. How about optimizing a bit?</p>
<p>With the relatively new <code>@each</code> loop and nested array functions in SASS, you can set comma delimited lists for use in dynamic variables.</p>
<figure class="highlight sass"><figcaption><span>helpers.scss</span></figcaption><table><tr><td class="gutter"><pre>1
2
3
4
5
</pre></td><td class="code"><pre>
<span class="comment">// let's generate some CSS!</span>
<span class="comment">// loops through array:</span>
<span class="comment">// vars: amt, direction, class-suffix</span>
<span class="variable">$default</span><span class="attribute">-space</span><span class="attribute">-amounts</span><span class="attribute">-with</span><span class="attribute">-direction</span>: (<span class="number">5</span> left l, <span class="number">10</span> left l, <span class="number">15</span> left l, <span class="number">25</span> left l, <span class="number">30</span> left l);
</pre></td></tr></table></figure>

<p>We set up a basic iteration loop, here. The goal is to generate markup that follows our pattern from above, which fortunately is fairly simple:</p>
<figure class="highlight sass"><figcaption><span>helpers.scss</span></figcaption><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
</pre></td><td class="code"><pre>
@mixin generate-spacing-classes(
  $<span class="keyword">default</span>-<span class="built_in">space</span>-amounts-<span class="keyword">with</span>-direction: (<span class="number">5</span> <span class="built_in">left</span> l, <span class="number">10</span> <span class="built_in">left</span> l, <span class="number">15</span> <span class="built_in">left</span> l, <span class="number">25</span> <span class="built_in">left</span> l, <span class="number">30</span> <span class="built_in">left</span> l)
) {
  @<span class="keyword">each</span> $<span class="built_in">space</span> <span class="keyword">in</span> $<span class="keyword">default</span>-<span class="built_in">space</span>-amounts-<span class="keyword">with</span>-direction {
    .m#{nth($<span class="built_in">space</span>, <span class="number">3</span>)}-#{nth($<span class="built_in">space</span>, <span class="number">1</span>)} {
      margin-#{nth($<span class="built_in">space</span>, <span class="number">2</span>)}: #{nth($<span class="built_in">space</span>, <span class="number">1</span>)}px;
    }
  }
}

@include generate-spacing-classes();
</pre></td></tr></table></figure>

<p>This generates the exact same markup as before.</p>
<p>Boom. Now, I can add more variable array definitions and simply include a few lines to have it output for each of these loops:</p>
<figure class="highlight sass"><figcaption><span>helpers.scss</span></figcaption><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
</pre></td><td class="code"><pre>
<span class="variable">$right</span><span class="attribute">-space</span><span class="attribute">-vars</span>: (<span class="number">5</span> right r, <span class="number">10</span> right r, <span class="number">15</span> right r, <span class="number">25</span> right r, <span class="number">30</span> right r);
<span class="variable">$bottom</span><span class="attribute">-space</span><span class="attribute">-vars</span>: (<span class="number">5</span> bottom b, <span class="number">10</span> bottom b, <span class="number">15</span> bottom b, <span class="number">25</span> bottom b, <span class="number">30</span> bottom b);
<span class="variable">$top</span><span class="attribute">-space</span><span class="attribute">-vars</span>: (<span class="number">5</span> top t, <span class="number">10</span> top t, <span class="number">15</span> top t, <span class="number">25</span> top t, <span class="number">30</span> top t);

@include generate<span class="attribute">-spacing</span><span class="attribute">-classes</span>(); <span class="comment">// left comes by default</span>
@include generate<span class="attribute">-spacing</span><span class="attribute">-classes</span>(<span class="variable">$right</span><span class="attribute">-space</span><span class="attribute">-vars</span>);
@include generate<span class="attribute">-spacing</span><span class="attribute">-classes</span>(<span class="variable">$bottom</span><span class="attribute">-space</span><span class="attribute">-vars</span>);
@include generate<span class="attribute">-spacing</span><span class="attribute">-classes</span>(<span class="variable">$top</span><span class="attribute">-space</span><span class="attribute">-vars</span>);
</pre></td></tr></table></figure>

<p>Voila, we get this:</p>
<figure class="highlight css"><figcaption><span>application.css</span></figcaption><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
</pre></td><td class="code"><pre>
<span class="class">.ml-5</span> <span class="rules">{
  <span class="rule"><span class="attribute">margin-left</span>:<span class="value"> <span class="number">5</span>px</span></span>; <span class="rule">}</span></span>

<span class="class">.ml-10</span> <span class="rules">{
  <span class="rule"><span class="attribute">margin-left</span>:<span class="value"> <span class="number">10</span>px</span></span>; <span class="rule">}</span></span>

<span class="class">.ml-15</span> <span class="rules">{
  <span class="rule"><span class="attribute">margin-left</span>:<span class="value"> <span class="number">15</span>px</span></span>; <span class="rule">}</span></span>

<span class="class">.ml-25</span> <span class="rules">{
  <span class="rule"><span class="attribute">margin-left</span>:<span class="value"> <span class="number">25</span>px</span></span>; <span class="rule">}</span></span>

<span class="class">.ml-30</span> <span class="rules">{
  <span class="rule"><span class="attribute">margin-left</span>:<span class="value"> <span class="number">30</span>px</span></span>; <span class="rule">}</span></span>

<span class="class">.mr-5</span> <span class="rules">{
  <span class="rule"><span class="attribute">margin-right</span>:<span class="value"> <span class="number">5</span>px</span></span>; <span class="rule">}</span></span>

<span class="class">.mr-10</span> <span class="rules">{
  <span class="rule"><span class="attribute">margin-right</span>:<span class="value"> <span class="number">10</span>px</span></span>; <span class="rule">}</span></span>

<span class="class">.mr-15</span> <span class="rules">{
  <span class="rule"><span class="attribute">margin-right</span>:<span class="value"> <span class="number">15</span>px</span></span>; <span class="rule">}</span></span>

...
</pre></td></tr></table></figure>

<div class = "is-edited" markdown = "1">For those interested, I whipped up a little <code>LESS</code> version today.</div>

<p>It’s a little different, but loops work a little differently in LESS. You just set up an iterator, kick off the mixin itself from within the mixin, and loop through as many times as you want.</p>
<figure class="highlight less"><figcaption><span>helpers.less</span></figcaption><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
</pre></td><td class="code"><pre>.generate-margin(<span class="variable">@n</span>, <span class="variable">@i</span>: <span class="number">1</span>, <span class="variable">@direction</span>: bottom, <span class="variable">@type</span>: <span class="keyword">m</span>, <span class="variable">@iterator</span>: <span class="number">5</span>) <span class="keyword">when</span> (<span class="variable">@i</span> =&lt; <span class="variable">@n</span>) {

  <span class="variable">@suffix</span>: <span class="variable">@i</span><span class="variable">*@</span>iterator;
  .<span class="variable">@{type}</span>-<span class="variable">@{direction}</span>-<span class="variable">@{suffix}</span> <span class="keyword">when</span> (<span class="variable">@type</span> = <span class="keyword">m</span>) {
    margin-<span class="variable">@{direction}</span>: <span class="variable">@suffix</span> + 0px;
  }
  .<span class="variable">@{type}</span>-<span class="variable">@{direction}</span>-<span class="variable">@{suffix}</span> <span class="keyword">when</span> (<span class="variable">@type</span> = p) {
    padding-<span class="variable">@{direction}</span>: <span class="variable">@suffix</span> + 0px;
  }
  .generate-margin(<span class="variable">@n</span>, (<span class="variable">@i</span> + <span class="number">1</span>), <span class="variable">@direction</span>, <span class="variable">@type</span>, <span class="variable">@iterator</span>);
}

.generate-margin(<span class="number">15</span>, <span class="number">1</span>, top, <span class="keyword">m</span>, <span class="number">5</span>);
.generate-margin(<span class="number">15</span>, <span class="number">1</span>, bottom, <span class="keyword">m</span>, <span class="number">5</span>);
.generate-margin(<span class="number">15</span>, <span class="number">1</span>, bottom, p, <span class="number">5</span>);
.generate-margin(<span class="number">15</span>, <span class="number">1</span>, top, p, <span class="number">5</span>);
</pre></td></tr></table></figure>

<p>Generates:</p>
<figure class="highlight css"><figcaption><span>application.css</span></figcaption><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
</pre></td><td class="code"><pre>...
<span class="class">.m-top-40</span> <span class="rules">{
  <span class="rule"><span class="attribute">margin-top</span>:<span class="value"> <span class="number">40</span>px</span></span>;
<span class="rule">}</span></span>
<span class="class">.m-top-45</span> <span class="rules">{
  <span class="rule"><span class="attribute">margin-top</span>:<span class="value"> <span class="number">45</span>px</span></span>;
<span class="rule">}</span></span>
<span class="class">.m-top-50</span> <span class="rules">{
  <span class="rule"><span class="attribute">margin-top</span>:<span class="value"> <span class="number">50</span>px</span></span>;
<span class="rule">}</span></span>
<span class="class">.p-bottom-5</span> <span class="rules">{
  <span class="rule"><span class="attribute">margin-bottom</span>:<span class="value"> <span class="number">5</span>px</span></span>;
<span class="rule">}</span></span>
<span class="class">.p-bottom-10</span> <span class="rules">{
  <span class="rule"><span class="attribute">margin-bottom</span>:<span class="value"> <span class="number">10</span>px</span></span>;
<span class="rule">}</span></span>
<span class="class">.p-bottom-15</span> <span class="rules">{
  <span class="rule"><span class="attribute">margin-bottom</span>:<span class="value"> <span class="number">15</span>px</span></span>;
<span class="rule">}</span></span>
<span class="class">.p-bottom-20</span> <span class="rules">{
  <span class="rule"><span class="attribute">margin-bottom</span>:<span class="value"> <span class="number">20</span>px</span></span>;
<span class="rule">}</span></span>
<span class="class">.p-bottom-25</span> <span class="rules">{
  <span class="rule"><span class="attribute">margin-bottom</span>:<span class="value"> <span class="number">25</span>px</span></span>;
<span class="rule"><span class="attribute">...</span></span></span>
</pre></td></tr></table></figure>

<p>This entire approach follows the pattern and way I like to work is to build principles and a foundation so each project is a bit easier.</p>
<p>It’s kind of like climbing a mountain a little faster each time.</p>
]]></content>
    
    
      <category term="sass" scheme="http://blog.andrewmart.in/tags/sass/"/>
    
      <category term="smacss" scheme="http://blog.andrewmart.in/tags/smacss/"/>
    
      <category term="less" scheme="http://blog.andrewmart.in/tags/less/"/>
    
      <category term="Front End Development" scheme="http://blog.andrewmart.in/categories/Front%20End%20Development/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Hello World, I'm Using Hexo]]></title>
    <link href="http://blog.andrewmart.in/2014/04/05/hello-world/"/>
    <id>http://blog.andrewmart.in/2014/04/05/hello-world/</id>
    <published>2014-04-05T23:23:05.000Z</published>
    <updated>2014-04-07T18:22:11.000Z</updated>
    <content type="html"><![CDATA[<p>After a long search, and coincidentally due to patience and timing, I’m finally making an effort to work on my blog. I’ve chosen a static site generator for the <a href="http://blog.guestlistapp.com/post/2304152860/five-reasons-to-use-a-static-site-generator-instead-of" target="_blank">many other reasons</a> out there, and so far, I have no regrets.</p>
<p>I chose <a href="http://zespia.tw/hexo" target="_blank">Hexo</a> for one thing: speed. There are a ton of options out there, no doubt, and I started working in <a href="http://jekyllrb.com" target="_blank">Jekyll</a>, which I may be regretting down the road, but I must say that the millisecond generation process and overall ease of templating using EJS tags is definitely in my arena.</p>
]]></content>
    
    
      <category term="blog" scheme="http://blog.andrewmart.in/tags/blog/"/>
    
      <category term="hexo" scheme="http://blog.andrewmart.in/tags/hexo/"/>
    
      <category term="Frameworks" scheme="http://blog.andrewmart.in/categories/Frameworks/"/>
    
      <category term="Hexo" scheme="http://blog.andrewmart.in/categories/Frameworks/Hexo/"/>
    
  </entry>
  
</feed>
