<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title><![CDATA[Andrew Martin is a Web Developer]]></title>
  <subtitle><![CDATA[web development and ramblings in Los Angeles and beyond]]></subtitle>
  <link href="/atom.xml" rel="self"/>
  <link href="http://blog.andrewmart.in/"/>
  <updated>2014-04-06T21:17:27.817Z</updated>
  <id>http://blog.andrewmart.in/</id>
  
  <author>
    <name><![CDATA[Andrew Martin]]></name>
    <email><![CDATA[hello@andrewmart.in]]></email>
  </author>
  
  <generator uri="http://zespia.tw/hexo/">Hexo</generator>
  
  <entry>
    <title><![CDATA[Loops and Mixins in SASS]]></title>
    <link href="http://blog.andrewmart.in/2014/04/05/loops-and-mixins-in-sass/"/>
    <id>http://blog.andrewmart.in/2014/04/05/loops-and-mixins-in-sass/</id>
    <published>2014-04-05T23:29:18.000Z</published>
    <updated>2014-04-06T21:16:57.000Z</updated>
    <content type="html"><![CDATA[<p>The beauty of freelancing is twofold: you work on a lot of different projects simultaneously, and have to learn to quickly dive into a various set of systems at any given moment.</p>
<p>One challenge I run into in my work is building scalable, modular CSS, and lately I’ve been making a strong effort to write more modular code.</p>
<p>Here’s a pattern I ran into today. Say I want to add a simple spacer class that adds a little padding or margin on an element. I’d rather not have to do anything beyond editing the HTML markup, so let’s generate some CSS classes using a SASS <code>@each</code> loop.</p>
<p>My first take was to set up some <code>$spaceamounts</code>, then generate a few mixins:</p>
<figure class="highlight sass"><figcaption><span>helpers.scss</span></figcaption><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
</pre></td><td class="code"><pre>
<span class="variable">$spaceamounts</span><span class="symbol">:</span> (<span class="number">5</span>, <span class="number">10</span>, <span class="number">15</span>, <span class="number">20</span>, <span class="number">25</span>, <span class="number">30</span>);

<span class="variable">@mixin</span> generate-margin-bottom() {
  <span class="variable">@each</span> <span class="variable">$space</span> <span class="keyword">in</span> <span class="variable">$spaceamounts</span> {
    .mb-<span class="comment">#{$space} {</span>
      margin-<span class="symbol">bottom:</span> <span class="comment">#{$space}px;</span>
    }
  }
}
<span class="variable">@mixin</span> generate-margin-right() {
  <span class="variable">@each</span> <span class="variable">$space</span> <span class="keyword">in</span> <span class="variable">$spaceamounts</span> {
    .mr-<span class="comment">#{$space} {</span>
      margin-<span class="symbol">right:</span> <span class="comment">#{$space}px;</span>
    }
  }
}
<span class="variable">@mixin</span> generate-margin-top() {
  <span class="variable">@each</span> <span class="variable">$space</span> <span class="keyword">in</span> <span class="variable">$spaceamounts</span> {
    .mt-<span class="comment">#{$space} {</span>
      margin-<span class="symbol">top:</span> <span class="comment">#{$space}px;</span>
    }
  }
}
<span class="variable">@mixin</span> generate-padding-top() {
  <span class="variable">@each</span> <span class="variable">$space</span> <span class="keyword">in</span> <span class="variable">$spaceamounts</span> {
    .pt-<span class="comment">#{$space} {</span>
      padding-<span class="symbol">top:</span> <span class="comment">#{$space}px;</span>
    }
  }
}
<span class="variable">@mixin</span> generate-padding-bottom() {
  <span class="variable">@each</span> <span class="variable">$space</span> <span class="keyword">in</span> <span class="variable">$spaceamounts</span> {
    .pb-<span class="comment">#{$space} {</span>
      padding-<span class="symbol">bottom:</span> <span class="comment">#{$space}px;</span>
    }
  }
}

<span class="variable">@include</span> generate-margin-bottom();
<span class="variable">@include</span> generate-margin-right();
<span class="variable">@include</span> generate-margin-top();
<span class="variable">@include</span> generate-padding-bottom();
<span class="variable">@include</span> generate-padding-top();
</pre></td></tr></table></figure>

<p>This approach definitely works. I get some sensibly generated CSS:</p>
<figure class="highlight css"><figcaption><span>application.css</span></figcaption><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
</pre></td><td class="code"><pre>
<span class="class">.ml-5</span> <span class="rules">{
  <span class="rule"><span class="attribute">margin-left</span>:<span class="value"> <span class="number">5</span>px</span></span>; <span class="rule">}</span></span>

<span class="class">.ml-10</span> <span class="rules">{
  <span class="rule"><span class="attribute">margin-left</span>:<span class="value"> <span class="number">10</span>px</span></span>; <span class="rule">}</span></span>

<span class="class">.ml-15</span> <span class="rules">{
  <span class="rule"><span class="attribute">margin-left</span>:<span class="value"> <span class="number">15</span>px</span></span>; <span class="rule">}</span></span>

...
</pre></td></tr></table></figure>

<p>But, that’s a lot of copying and pasting. How about optimizing a bit?</p>
<p>With the relatively new <code>@each</code> loop and nested array functions in SASS, you can set comma delimited lists for use in dynamic variables.</p>
<figure class="highlight sass"><figcaption><span>helpers.scss</span></figcaption><table><tr><td class="gutter"><pre>1
2
3
4
5
</pre></td><td class="code"><pre>
<span class="comment">// let's generate some CSS!</span>
<span class="comment">// loops through array:</span>
<span class="comment">// vars: amt, direction, class-suffix</span>
<span class="variable">$default</span><span class="attribute">-space</span><span class="attribute">-amounts</span><span class="attribute">-with</span><span class="attribute">-direction</span>: (<span class="number">5</span> left l, <span class="number">10</span> left l, <span class="number">15</span> left l, <span class="number">25</span> left l, <span class="number">30</span> left l);
</pre></td></tr></table></figure>

<p>We set up a basic iteration loop, here. The goal is to generate markup that follows our pattern from above, which fortunately is fairly simple:</p>
<figure class="highlight sass"><figcaption><span>helpers.scss</span></figcaption><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
</pre></td><td class="code"><pre>
@mixin generate-spacing-classes(
  $<span class="keyword">default</span>-<span class="built_in">space</span>-amounts-<span class="keyword">with</span>-direction: (<span class="number">5</span> <span class="built_in">left</span> l, <span class="number">10</span> <span class="built_in">left</span> l, <span class="number">15</span> <span class="built_in">left</span> l, <span class="number">25</span> <span class="built_in">left</span> l, <span class="number">30</span> <span class="built_in">left</span> l)
) {
  @<span class="keyword">each</span> $<span class="built_in">space</span> <span class="keyword">in</span> $<span class="keyword">default</span>-<span class="built_in">space</span>-amounts-<span class="keyword">with</span>-direction {
    .m#{nth($<span class="built_in">space</span>, <span class="number">3</span>)}-#{nth($<span class="built_in">space</span>, <span class="number">1</span>)} {
      margin-#{nth($<span class="built_in">space</span>, <span class="number">2</span>)}: #{nth($<span class="built_in">space</span>, <span class="number">1</span>)}px;
    }
  }
}

@include generate-spacing-classes();
</pre></td></tr></table></figure>

<p>This generates the exact same markup as before.</p>
<p>Boom. Now, I can add more variable array definitions and simply include a few lines to have it output for each of these loops:</p>
<figure class="highlight sass"><figcaption><span>helpers.scss</span></figcaption><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
</pre></td><td class="code"><pre>
<span class="variable">$right</span><span class="attribute">-space</span><span class="attribute">-vars</span>: (<span class="number">5</span> right r, <span class="number">10</span> right r, <span class="number">15</span> right r, <span class="number">25</span> right r, <span class="number">30</span> right r);
<span class="variable">$bottom</span><span class="attribute">-space</span><span class="attribute">-vars</span>: (<span class="number">5</span> bottom b, <span class="number">10</span> bottom b, <span class="number">15</span> bottom b, <span class="number">25</span> bottom b, <span class="number">30</span> bottom b);
<span class="variable">$top</span><span class="attribute">-space</span><span class="attribute">-vars</span>: (<span class="number">5</span> top t, <span class="number">10</span> top t, <span class="number">15</span> top t, <span class="number">25</span> top t, <span class="number">30</span> top t);

@include generate<span class="attribute">-spacing</span><span class="attribute">-classes</span>(); <span class="comment">// left comes by default</span>
@include generate<span class="attribute">-spacing</span><span class="attribute">-classes</span>(<span class="variable">$right</span><span class="attribute">-space</span><span class="attribute">-vars</span>);
@include generate<span class="attribute">-spacing</span><span class="attribute">-classes</span>(<span class="variable">$bottom</span><span class="attribute">-space</span><span class="attribute">-vars</span>);
@include generate<span class="attribute">-spacing</span><span class="attribute">-classes</span>(<span class="variable">$top</span><span class="attribute">-space</span><span class="attribute">-vars</span>);
</pre></td></tr></table></figure>

<p>Voila, we get this:</p>
<figure class="highlight css"><figcaption><span>application.css</span></figcaption><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
</pre></td><td class="code"><pre>
<span class="class">.ml-5</span> <span class="rules">{
  <span class="rule"><span class="attribute">margin-left</span>:<span class="value"> <span class="number">5</span>px</span></span>; <span class="rule">}</span></span>

<span class="class">.ml-10</span> <span class="rules">{
  <span class="rule"><span class="attribute">margin-left</span>:<span class="value"> <span class="number">10</span>px</span></span>; <span class="rule">}</span></span>

<span class="class">.ml-15</span> <span class="rules">{
  <span class="rule"><span class="attribute">margin-left</span>:<span class="value"> <span class="number">15</span>px</span></span>; <span class="rule">}</span></span>

<span class="class">.ml-25</span> <span class="rules">{
  <span class="rule"><span class="attribute">margin-left</span>:<span class="value"> <span class="number">25</span>px</span></span>; <span class="rule">}</span></span>

<span class="class">.ml-30</span> <span class="rules">{
  <span class="rule"><span class="attribute">margin-left</span>:<span class="value"> <span class="number">30</span>px</span></span>; <span class="rule">}</span></span>

<span class="class">.mr-5</span> <span class="rules">{
  <span class="rule"><span class="attribute">margin-right</span>:<span class="value"> <span class="number">5</span>px</span></span>; <span class="rule">}</span></span>

<span class="class">.mr-10</span> <span class="rules">{
  <span class="rule"><span class="attribute">margin-right</span>:<span class="value"> <span class="number">10</span>px</span></span>; <span class="rule">}</span></span>

<span class="class">.mr-15</span> <span class="rules">{
  <span class="rule"><span class="attribute">margin-right</span>:<span class="value"> <span class="number">15</span>px</span></span>; <span class="rule">}</span></span>

...
</pre></td></tr></table></figure>

<p>This entire approach follows the pattern and way I like to work is to build principles and a foundation so each project is a bit easier.</p>
<p>It’s kind of like climbing a mountain a little faster each time.</p>
]]></content>
    
    
      <category term="sass" scheme="http://blog.andrewmart.in/tags/sass/"/>
    
      <category term="smacss" scheme="http://blog.andrewmart.in/tags/smacss/"/>
    
      <category term="Front End Development" scheme="http://blog.andrewmart.in/categories/Front%20End%20Development/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Hello World, I'm Using Hexo]]></title>
    <link href="http://blog.andrewmart.in/2014/04/05/hello-world/"/>
    <id>http://blog.andrewmart.in/2014/04/05/hello-world/</id>
    <published>2014-04-05T23:23:05.000Z</published>
    <updated>2014-04-06T21:16:57.000Z</updated>
    <content type="html"><![CDATA[<p>After a long search, and coincidentally due to patience and timing, I’m finally making an effort to work on my blog. I’ve chosen a static site generator for the <a href="http://blog.guestlistapp.com/post/2304152860/five-reasons-to-use-a-static-site-generator-instead-of" target="_blank">many other reasons</a> out there, and so far, I have no regrets.</p>
<p>I chose <a href="http://zespia.tw/hexo" target="_blank">Hexo</a> for one thing: speed. There are a ton of options out there, no doubt, and I started working in <a href="http://jekyllrb.com" target="_blank">Jekyll</a>, which I may be regretting down the road, but I must say that the millisecond generation process and overall ease of templating using EJS tags is definitely in my arena.</p>
]]></content>
    
    
      <category term="blog" scheme="http://blog.andrewmart.in/tags/blog/"/>
    
      <category term="Frameworks" scheme="http://blog.andrewmart.in/categories/Frameworks/"/>
    
  </entry>
  
</feed>
